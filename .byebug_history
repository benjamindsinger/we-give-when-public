c
@legal_entity.title
c
monthly_maximum_after_fees
amount_to_charge
c
error.backtrace.each { |frame| puts frame }
error.backtrace.each do |frame|
error.backtrace.fifth
error.backtrace.next
error.backtrace.fourth
error.backtrace.third
error.backtrace.second
error.backtrace.first
error.backtrace.each do |frame|
error.backtrace.class
c
n
personalization.add_substitution(Substitution.new(key: '|NUMBER_OF_TRIGGERS|', value: @number_of_triggers))
n
@number_of_triggers = number_of_triggers
list=
@crowd_fund.cause
@crowd_fund = membership.crowd_fund
@crowd_fund
@crowd_fund.cause
membership.crowd_fund
@crowd_fund.cause
membership.funder
membership.crowd_fund
membership
c
membership
number_of_triggers
response
n
c
exit
c
C
c
exit
c
C
exit
c
exit
c
exit
c
exit
e
c
exit
c
membership.funder
membership.crowd_fund
membership.class
c
n
c
n
c
Settings.stripe_test_secret_key
c
Settings.stripe_test_secret_key
c
Settings.sendgrid_test
Settings.stripe_test_secret_key
c
Settings.stripe_test_secret_key
c
reload!
Settings.stripe_test_secret_key
Settings.sendgrid_test
list=
Settings.sendgrid_test
from.class
n
c
@crowd_fund.suggested_email_subject
membership.crowd_fund
c
@membership
membership
@membership.class
@membership.funder
@membership.funder.email
membership
c
error
c
crowd_fund_memberships.size
c
error
erorr
c
error
c
crowd_fund_memberships.size
c
Funder.create! == false
Funder.create!
Funder.create
Funder.create == false
crowd_fund_memberships
c
n
c
crowd_fund_memberships
c
n
crowd_fund_memberships.size
c
CrowdFund.all
Funder.count
n
list=
CrowdFundMembership.count
CrowdFundMemberships.count
self.crowd_fund_memberships
self
crowd_fund_memberships
crowd_fund_memberships.size
api_to_charge
number_of_triggers
